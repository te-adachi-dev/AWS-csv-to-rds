AWSTemplateFormatVersion: '2010-09-09'
Description: 'ETL CSV to RDS PostgreSQL System with 3 Lambda Functions - 改善版'

Parameters:
  ProjectName:
    Type: String
    Default: 'etl-csv-to-rds-postgresql'
    Description: 'Project name for resource naming'

  DBMasterUsername:
    Type: String
    Default: 'postgres'
    Description: 'RDS Master Username'

  DBMasterPassword:
    Type: String
    NoEcho: true
    MinLength: 8
    Description: 'RDS Master Password (minimum 8 characters)'
    Default: 'TestPassword123!'

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-vpc'

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-igw'

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Subnets - 3つのプライベートサブネット（RDS用）
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-private-subnet-1'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-private-subnet-2'

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !GetAZs '']
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-private-subnet-3'

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.101.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-subnet-1'

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-rt'

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-private-rt'

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3

  # S3 Bucket (シンプル版)
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'etl-csv-to-rds-postgresql-bucket-${AWS::AccountId}-20250612'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-main-bucket'

  # S3 Bucket Policy（循環依存を避けるため、条件付きで設定）
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: S3Bucket
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Sid: AllowCurrentAccount
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:DeleteObject'
              - 's3:ListBucket'
            Resource:
              - !Sub 'arn:aws:s3:::${S3Bucket}'
              - !Sub 'arn:aws:s3:::${S3Bucket}/*'
          # 将来的なクロスアカウント対応用（必要時にコメントアウト解除）
          # - Sid: AllowCrossAccountPut
          #   Effect: Allow
          #   Principal:
          #     AWS: 'arn:aws:iam::OTHER-ACCOUNT-ID:root'
          #   Action:
          #     - 's3:PutObject'
          #     - 's3:PutObjectAcl'
          #   Resource: !Sub 'arn:aws:s3:::${S3Bucket}/csv/*'
          #   Condition:
          #     StringEquals:
          #       's3:x-amz-acl': 'bucket-owner-full-control'

  # S3 VPC Endpoint
  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PrivateRouteTable

  # Lambda VPC Endpoint
  LambdaVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.lambda'
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: true

  # CloudWatch Logs VPC Endpoint
  CloudWatchLogsVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.logs'
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: true

  # Monitoring VPC Endpoint（CloudWatch）
  MonitoringVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.monitoring'
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: true

  # Security Groups
  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for VPC Endpoints
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
          Description: HTTPS from Lambda SG only
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS to anywhere
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-vpc-endpoint-sg'

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS for S3/AWS API access
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 10.0.0.0/16
          Description: PostgreSQL access to RDS
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-lambda-sg'

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
          Description: PostgreSQL from Lambda
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-rds-sg'

  # RDS Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-db-subnet-group'

  # RDS Instance
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub '${ProjectName}-postgres-20250612'
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: '15.8'
      AllocatedStorage: 20
      StorageType: gp2
      MasterUsername: !Ref DBMasterUsername
      MasterUserPassword: !Ref DBMasterPassword
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      BackupRetentionPeriod: 7
      MultiAZ: false
      PubliclyAccessible: false
      StorageEncrypted: true
      DeletionProtection: false
      EnablePerformanceInsights: true
      PerformanceInsightsRetentionPeriod: 7
      MonitoringInterval: 60
      MonitoringRoleArn: !GetAtt RDSEnhancedMonitoringRole.Arn
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-postgres'

  # RDS Enhanced Monitoring Role
  RDSEnhancedMonitoringRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: monitoring.rds.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole'
      Path: /

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3FullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${S3Bucket}/*'
                  - !Sub 'arn:aws:s3:::${S3Bucket}'
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                  - 'logs:DescribeLogGroups'
                Resource: '*'
        - PolicyName: VPCEndpointAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:AttachNetworkInterface'
                  - 'ec2:DetachNetworkInterface'
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:DescribeSubnets'
                  - 'ec2:DescribeVpcs'
                Resource: '*'

  # psycopg2 Lambda Layer
  Psycopg2Layer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub '${ProjectName}-psycopg2-layer'
      Description: 'psycopg2 2.9.10 library for PostgreSQL connectivity'
      Content:
        S3Bucket: !Sub 'etl-csv-to-rds-postgresql-temp-files-${AWS::AccountId}'
        S3Key: 'layers/psycopg2-layer-python311-fixed.zip'
      CompatibleRuntimes:
        - python3.11

  # Lambda 1: テーブル作成Lambda関数（手動実行用）
  TableCreatorLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-table-creator'
      Runtime: python3.11
      Handler: table_creator.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 900
      MemorySize: 1024
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
          - !Ref PrivateSubnet3
      Environment:
        Variables:
          DB_HOST: !GetAtt RDSInstance.Endpoint.Address
          DB_PORT: !GetAtt RDSInstance.Endpoint.Port
          DB_NAME: postgres
          DB_USER: !Ref DBMasterUsername
          DB_PASSWORD: !Ref DBMasterPassword
          S3_BUCKET: !Ref S3Bucket
          SQL_PREFIX: 'init-sql/'
      Code:
        S3Bucket: !Sub 'etl-csv-to-rds-postgresql-temp-files-${AWS::AccountId}'
        S3Key: 'lambda-code/table_creator.zip'
      Layers:
        - !Ref Psycopg2Layer
      DeadLetterConfig:
        TargetArn: !GetAtt DeadLetterQueue.Arn

  # Lambda 2: CSV処理Lambda関数（S3トリガー）
  CSVProcessorLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-csv-processor'
      Runtime: python3.11
      Handler: csv_processor.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 900
      MemorySize: 1024
      ReservedConcurrencyLimit: 10
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
          - !Ref PrivateSubnet3
      Environment:
        Variables:
          DB_HOST: !GetAtt RDSInstance.Endpoint.Address
          DB_PORT: !GetAtt RDSInstance.Endpoint.Port
          DB_NAME: postgres
          DB_USER: !Ref DBMasterUsername
          DB_PASSWORD: !Ref DBMasterPassword
          S3_BUCKET: !Ref S3Bucket
      Code:
        S3Bucket: !Sub 'etl-csv-to-rds-postgresql-temp-files-${AWS::AccountId}'
        S3Key: 'lambda-code/csv_processor.zip'
      Layers:
        - !Ref Psycopg2Layer
      DeadLetterConfig:
        TargetArn: !GetAtt DeadLetterQueue.Arn

  # Lambda 3: 運用SQL実行Lambda関数（手動実行用）
  QueryExecutorLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-query-executor'
      Runtime: python3.11
      Handler: query_executor.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 900
      MemorySize: 1024
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
          - !Ref PrivateSubnet3
      Environment:
        Variables:
          DB_HOST: !GetAtt RDSInstance.Endpoint.Address
          DB_PORT: !GetAtt RDSInstance.Endpoint.Port
          DB_NAME: postgres
          DB_USER: !Ref DBMasterUsername
          DB_PASSWORD: !Ref DBMasterPassword
          S3_BUCKET: !Ref S3Bucket
          OUTPUT_PREFIX: 'query-results/'
      Code:
        S3Bucket: !Sub 'etl-csv-to-rds-postgresql-temp-files-${AWS::AccountId}'
        S3Key: 'lambda-code/query_executor.zip'
      Layers:
        - !Ref Psycopg2Layer
      DeadLetterConfig:
        TargetArn: !GetAtt DeadLetterQueue.Arn

  # Dead Letter Queue for Lambda Functions
  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${ProjectName}-lambda-dlq'
      MessageRetentionPeriod: 1209600  # 14 days
      VisibilityTimeoutSeconds: 60
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-lambda-dlq'

  # S3からLambdaへの実行権限 (S3Bucketの循環依存を避けるためDependsOn削除)
  CSVProcessorLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CSVProcessorLambdaFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::${S3Bucket}'

  # S3 Bucket Notification Configuration (カスタムリソース)
  S3BucketNotificationCustomResource:
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
      - CSVProcessorLambdaFunction
      - CSVProcessorLambdaPermission
    Properties:
      ServiceToken: !GetAtt S3NotificationLambda.Arn
      BucketName: !Ref S3Bucket
      LambdaArn: !GetAtt CSVProcessorLambdaFunction.Arn

  # S3通知設定用Lambda関数
  S3NotificationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-s3-notification-setup'
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt S3NotificationLambdaRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          
          def lambda_handler(event, context):
              try:
                  s3 = boto3.client('s3')
                  
                  bucket_name = event['ResourceProperties']['BucketName']
                  lambda_arn = event['ResourceProperties']['LambdaArn']
                  
                  if event['RequestType'] == 'Delete':
                      # 削除時は通知設定をクリア
                      s3.put_bucket_notification_configuration(
                          Bucket=bucket_name,
                          NotificationConfiguration={}
                      )
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      return
                  
                  # 通知設定
                  notification_config = {
                      'LambdaConfigurations': [
                          {
                              'Id': 'csv-processor-trigger',
                              'LambdaFunctionArn': lambda_arn,
                              'Events': ['s3:ObjectCreated:*'],
                              'Filter': {
                                  'Key': {
                                      'FilterRules': [
                                          {'Name': 'prefix', 'Value': 'csv/'},
                                          {'Name': 'suffix', 'Value': '.csv'}
                                      ]
                                  }
                              }
                          }
                      ]
                  }
                  
                  s3.put_bucket_notification_configuration(
                      Bucket=bucket_name,
                      NotificationConfiguration=notification_config
                  )
                  
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  
              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

  # S3通知設定Lambda用のIAMロール
  S3NotificationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3NotificationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetBucketNotification
                  - s3:PutBucketNotification
                Resource: !Sub 'arn:aws:s3:::${S3Bucket}'

  # CloudWatch Log Groups (循環依存を避けるため関数名を直接指定)
  TableCreatorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-table-creator'
      RetentionInDays: 30

  CSVProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-csv-processor'
      RetentionInDays: 30

  QueryExecutorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-query-executor'
      RetentionInDays: 30

Outputs:
  S3BucketName:
    Description: Name of the S3 bucket for files
    Value: !Ref S3Bucket
    Export:
      Name: !Sub '${AWS::StackName}-S3Bucket'

  TableCreatorFunction:
    Description: Table Creator Lambda Function Name
    Value: !Ref TableCreatorLambdaFunction
    Export:
      Name: !Sub '${AWS::StackName}-TableCreatorFunction'

  CSVProcessorFunction:
    Description: CSV Processor Lambda Function Name
    Value: !Ref CSVProcessorLambdaFunction
    Export:
      Name: !Sub '${AWS::StackName}-CSVProcessorFunction'

  QueryExecutorFunction:
    Description: Query Executor Lambda Function Name
    Value: !Ref QueryExecutorLambdaFunction
    Export:
      Name: !Sub '${AWS::StackName}-QueryExecutorFunction'

  RDSEndpoint:
    Description: RDS PostgreSQL Endpoint
    Value: !GetAtt RDSInstance.Endpoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-RDSEndpoint'

  RDSPort:
    Description: RDS PostgreSQL Port
    Value: !GetAtt RDSInstance.Endpoint.Port
    Export:
      Name: !Sub '${AWS::StackName}-RDSPort'

  DatabaseName:
    Description: Database Name
    Value: postgres
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseName'

  DatabaseUser:
    Description: Database Username
    Value: !Ref DBMasterUsername
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseUser'

  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPCId'

  LambdaSecurityGroupId:
    Description: Lambda Security Group ID
    Value: !Ref LambdaSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-LambdaSecurityGroupId'

  RDSSecurityGroupId:
    Description: RDS Security Group ID
    Value: !Ref RDSSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-RDSSecurityGroupId'

  DeadLetterQueueUrl:
    Description: Dead Letter Queue URL
    Value: !Ref DeadLetterQueue
    Export:
      Name: !Sub '${AWS::StackName}-DeadLetterQueueUrl'